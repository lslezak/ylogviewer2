
import React, { useState, useEffect } from "react";
import { Bullseye, Spinner, Text } from "@patternfly/react-core";

import { XzReadableStream } from 'xzwasm';
import tarball from "tarballjs";

export default function ArchiveViewer({data, name}) {
  const [logData, setLogData] = useState(data);
  const [y2log, setY2log] = useState(null);
  const [originalFileName, setOriginalFileName] = useState(name);
  const [fileName, setFileName] = useState(name);
  const [processing, setProcessing] = useState(false);

  console.log(fileName, processing);

  if (!y2log) {
    if (!processing) {
      if (fileName.match(/\.tar$/i)) {
        console.log("Untaring", fileName);
        setProcessing(true);

        const tarReader = new tarball.TarReader();
        tarReader.readArrayBuffer(logData);

        setFileName(fileName.replace(/\.tar$/i, ""));
        setY2log(tarReader.getTextFile("YaST2/y2log"));
        setProcessing(false);
      }
      else if (!fileName.match(/\.xz$/i)) {
        console.log("logData", typeof logData);

        if (typeof logData !== "string")
        {
          const decoder = new TextDecoder("utf-8");
          setY2Log(decoder.decode(logData));
        }
      }
    }

    useEffect(() => {
      console.log("useEffect processing:", processing, fileName, logData);

      if (processing) return;

      // xz archive
      if (fileName.match(/\.xz$/i)) {
        console.time("Uncompressing " + fileName);
        setProcessing(true);
        const stream = new ReadableStream({
          start: (controller) => {
            controller.enqueue(new Uint8Array(logData));
            controller.close();
          }
        });

        const decompressedResponse = new Response(
          new XzReadableStream(stream)
        );

        decompressedResponse.arrayBuffer().then(done => {
          console.timeEnd("Uncompressing " + fileName);
          const newData = new Uint8Array(done).buffer;
          console.log("Uncompressed size", newData.byteLength);
          setLogData(newData);
          setFileName(fileName.replace(/\.xz$/i, ""));
          setProcessing(false);
        });
      }
    }, [fileName, logData, processing]);
  }

  return (
    <>
      { y2log ?
        <>
          <Text>
            {originalFileName}
          </Text>
          <br/>
          <Text>
            {y2log}
          </Text>
        </>
        :
        <Bullseye>
          <Spinner size="xl"/>
        </Bullseye>
      }
    </>
  );
};
